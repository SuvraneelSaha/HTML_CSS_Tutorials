html{
  box-sizing: border-box;
}

*,*::after,*::before{
  box-sizing: inherit;
}
.containerparent{
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100vw;
  height: 100vh;
}
.container{
  border: 10px solid black;
  /* width: 620px; */
  /* not needed the child elements will take the size accordingly */
}
  

.item{
  border: 5px solid palevioletred;
  width: 100%;
  padding: 1rem;
 background-color: pink;
}

.container{
  display: grid;
  grid-template-rows: 100px 100px 100px 100px 100px 100px ;
  grid-template-columns: 100px 100px 100px 100px 100px 100px ;


  /* grid-auto-rows:100px; */
  /* grip-auto-rows for the defining the size of the added extra items implicit grid items */

  grid-auto-columns: 100px;
  /* either grid-auto-columns for the explicit sizing of the extra items ie implicit grid items or grip-auto-row  */
  /* by default our implicit grid added a row  */
  /* we can change this default property using  */
  grid-auto-flow:column;
}
/* when extra items are added outside of a explicitly defined grid
then it is known as implicit grid   
it is smaller than others as it does not inherit the properties that we set in grid-template-col and 
grid-template-row  */
.item-1{
  grid-row-start: 1;
  grid-row-end: 3;
  grid-column-start: 1;
  grid-column-end: 7;

  /* 
  grid-row:1 / 3 ;
  grid-column:1 / 5;
   */
}

.item-2{
  /* grid-row: 1/3;
  grid-column: span 2; */
  /* disadvantage - not explicitly assigning the grid value ie row and column 
  span disadvantage  */

  grid-area: 2/4/4/6;
  /* now we want it to be on top so we will be using z-index */
  z-index: 1;
}

.item-3{
  /* grid-area: row-start col-start row-end col-end; */
  grid-area: 3 / 1 / -1 / -1;
  /* minus values also applicable  */
  /* z-index: 2; */
/* whose value will be bigger z index it will come on top then */
}

/* absolute positioning then use top right bottom left property */